WebRTC, openVidu, kurento 정리

openvidu, kurento 모두 WebRTC 통신 방식을 사용
WebRTC의 통신방식
 - P2P : 두 단말이 서로 1:1통신
 - MCU, SFU : 대규모 서비스 구축시 사용. 중앙 서버에서 트래픽 중계

MCU (Multipoint Control Unit)
한쪽 Peer에 서버를 두고, 들어오는 트래픽을 서버에서 믹싱해서 다시 내보내는 방식이다.
클라이언트와 네트워크의 부담이 줄어드는 반면, 중앙서버의 컴퓨팅 파워가 많이 요구된다.
참고한 블로그에서는 낡은 기술이고 + 서버 운용 비용이 높아, WebRTC와 같은 실시간성 
보장이 우선인 서비스인 경우 장점이 상쇄된다고 언급되어있다.

SFU (Selective Forwarding Unit)
믹싱하지않고 트래픽을 선별적으로 배분해서 보내주는 방식. 
각 peer 연결 할당과 encrypt / decrypt 역할을 서버가 담당한다.
1:N 스트리밍 구조에 적합하다고 한다.

두 기기가 실시간 소통을 하기 위해선 다음과 같은 사항이 필요하다.

1. 기기의 스트리밍 오디오 / 비디오 / 데이터를 가져올 수 있을 것
2. 소통하고자 하는 기기의 IP 주소와 포트 등 네트워크 데이터가 필요
3. 에러 보고, 세션 초기화를 위해 신호 통신을 관리해야 함
4. 서로 소통할 수 있는 해상도인지, 코덱은 맞는지 capability 정보 교환
5. 실제 연결을 맺음
6. 이후 스트리밍 오디오 / 비디오 / 데이터를 주고 받을 수 있어야 함.

때문에 WebRTC에서 제공하는 API
 - MediaStream : 사용자의 카메라 혹은 마이크 등 input 기기의 데이터 스트림에 접근한다.
 - RTCPeerConnection : 암호화/ 대역폭 관리 기능. 오디오 / 비디오 연결을 한다.
 - RTCDataChannel : 일반적인 데이터 P2P 통신
추가로 필요한 과정
 - Signaling : 통신할 peer간 정보 교환(네트워크 정보, capability 정보, 세션 수립 등)

시그널링의 역할

Session control messages: 통신의 초기화, 종료, 그리고 에러 리포트
Network configuration : 외부에서 보는 내 컴퓨터의 IP 주소와 포트
Media capabilites : 내 브라우저와 상대 브라우저가 사용 가능한 코덱, 그리고 해상도

turn 서버와 stun 서버 차이점

WebRTC는 P2P 로 디자인 되어 있음. 그래서 유저들은 가능한 최대한 많은 직접적인 
경로에 연결가능함. 실제 사용환경에선 직접 연결이 실패했을 때의 대비책이 필요함. 
대비책의 한 과정으로, WebRTC는 STUN 서버를 사용해 컴터의 IP를 가져오고 
TURN 서버는 p2p 통신이 실패할 경우 릴레이서버로 동작함.














